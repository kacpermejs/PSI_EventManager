services:
  frontend:
    environment:
      ENVIRONMENT: Production
      AWS_REGION: ${AWS_USER_POOL_ID}
      AWS_USER_POOL_ID: ${AWS_USER_POOL_ID}
      COGNITO_APP_CLIENT_ID: ${COGNITO_APP_CLIENT_ID}
    container_name: frontend
    image: ${DOCKER_REGISTRY-}psi_frontend
    build:
      context: ./PSI_Frontend
      dockerfile: Dockerfile
    networks:
      - app-network

  event-service:
    container_name: event-service
    image: ${DOCKER_REGISTRY-}event-service
    build:
      context: ./PSI_EventService
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
    networks:
      - app-network

  order-service:
    container_name: order-service
    image: ${DOCKER_REGISTRY-}order-service
    build:
      context: ./PSI_OrderService
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
    networks:
      - app-network

  ticket-service:
    container_name: ticket-service
    image: ${DOCKER_REGISTRY-}ticket-service
    build:
      context: ./PSI_TicketService
      dockerfile: Dockerfile
      args:
        SPRING_PROFILES_ACTIVE: prod
    networks:
      - app-network

  nginx:
    container_name: nginx
    image: nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx.middleware.conf:/etc/nginx/nginx.conf
    depends_on:
      - event-service
    networks:
      - app-network

  # Postgres inside docker for testing
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: mainuser
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
      
networks:
  app-network:
    driver: bridge

volumes:
  pgdata: {}
